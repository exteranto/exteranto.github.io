{
  "title": "@exteranto/ioc",
  "sections": [
    {
      "main": true,
      "id": "class-container",
      "title": "Class <code>Container</code>",
      "code": "import { Container } from '@exteranto/ioc'"
    },
    {
      "parent": "class-container",
      "id": "class-container-method-bind",
      "name": "bind",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>bind</code>",
          "body": {
            "description": [
              "Bins a dependency to the container and returns the dependency instance for further configuration."
            ],
            "parameters": [
              {
                "type": "concrete: any",
                "description": "The constructor to be bound"
              }
            ],
            "returns": {
              "type": "Dependency",
              "description": "The dependency class for futher configuration"
            }
          }
        }
      },
      "code": "s3:Container.bind"
    },
    {
      "parent": "class-container",
      "id": "class-container-method-bind-param",
      "name": "bindParam",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>bindParam</code>",
          "body": {
            "description": [
              "Bins a parameter to the container.",
              "Note that you can automatically bind parameters on application bootstrap using the config file. Read more in the 'Basic Concepts > Configuration' section."
            ],
            "parameters": [
              {
                "type": "name: string",
                "description": "The parameter name"
              },
              {
                "type": "param: any",
                "description": "The parameter value"
              }
            ],
            "returns": {
              "type": "void"
            }
          }
        }
      },
      "code": "s3:Container.bindParam"
    },
    {
      "parent": "class-container",
      "id": "class-container-method-resolve",
      "name": "resolve",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>resolve</code>",
          "body": {
            "description": [
              "Resolve a dependency from the container. Optionally provide constructor arguments.",
              "Note that you are strongly advised to you the annotations provided by the framework to resolve your dependencies."
            ],
            "parameters": [
              {
                "type": "abstract: any",
                "description": "The abstract constructor to be resolved"
              },
              {
                "type": "args: any[]",
                "description": "The constructor arguments for the dependency",
                "optional": true
              }
            ],
            "returns": {
              "type": "any",
              "description": "The resolved dependency"
            }
          }
        }
      },
      "code": "s3:Container.resolve"
    },
    {
      "parent": "class-container",
      "id": "class-container-method-resolve-param",
      "name": "resolveParam",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>resolveParam</code>",
          "body": {
            "description": [
              "Resolve a parameter from the container. This function supports the dot notation for breaking down objects.",
              "Note that you are strongly advised to you the annotations provided by the framework to resolve your parameters."
            ],
            "parameters": [
              {
                "type": "name: string",
                "description": "The name or the path of the parameter"
              }
            ],
            "returns": {
              "type": "any",
              "description": "The resolved parameter"
            }
          }
        }
      },
      "code": "s3:Container.resolveParam"
    },
    {
      "parent": "class-container",
      "id": "class-container-method-dump",
      "name": "dump",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>dump</code>",
          "body": {
            "description": [
              "Dump all contents of the container to the console. Implemented merely for debug purposes."
            ],
            "returns": {
              "type": "void"
            }
          }
        }
      }
    },
    {
      "parent": "class-container",
      "id": "class-container-method-reset",
      "name": "reset",
      "static": true,
      "content": {
        "block": {
          "title": "method <code>reset</code>",
          "body": {
            "description": [
              "<strong>Empties the container.</strong> Implemented for testing purposes.",
              "Testing mode for the container is in the roadmap and will be implemented in later versions."
            ],
            "returns": {
              "type": "void"
            }
          }
        }
      }
    },
    {
      "main": true,
      "id": "class-dependency",
      "title": "Class <code>Dependency</code>",
      "code": "import { Dependency } from '@exteranto/ioc'"
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-constructor",
      "name": "constructor",
      "content": {
        "block": {
          "title": "constructor",
          "body": {
            "description": [
              "Dependency constructor.",
              "Note that this class is fully handled by the Container class."
            ],
            "parameters": [
              {
                "type": "concrete: any",
                "description": "The dependency constructor to be bound"
              }
            ]
          }
        }
      }
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-to",
      "name": "to",
      "content": {
        "block": {
          "title": "method <code>to</code>",
          "body": {
            "description": [
              "Set the abstract for the dependency."
            ],
            "parameters": [
              {
                "type": "abstract: any",
                "description": "The abstract object"
              }
            ],
            "returns": {
              "type": "Dependency",
              "description": "The instance for chaining"
            }
          }
        }
      },
      "code": "s3:Dependency.to"
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-to-self",
      "name": "toSelf",
      "content": {
        "block": {
          "title": "method <code>toSelf</code>",
          "body": {
            "description": [
              "Bind a dependency to self."
            ],
            "returns": {
              "type": "Dependency",
              "description": "The instance for chaining"
            }
          }
        }
      },
      "code": "s3:Dependency.toSelf"
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-for",
      "name": "for",
      "content": {
        "block": {
          "title": "method <code>for</code>",
          "body": {
            "description": [
              "Bind a dependency only to a specific browser."
            ],
            "parameters": [
              {
                "type": "browser: Browser",
                "description": "The browser to bind the dependency to"
              }
            ],
            "returns": {
              "type": "Dependency",
              "description": "The instance for chaining"
            }
          }
        }
      },
      "code": "s3:Dependency.for"
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-singleton",
      "name": "singleton",
      "content": {
        "block": {
          "title": "method <code>singleton</code>",
          "body": {
            "description": [
              "Specify whether to bind the dependency as a singleton.",
              "Defaults to <code>false</code>."
            ],
            "parameters": [
              {
                "type": "singleton: bool",
                "description": "Whether to bind as a singleton"
              }
            ],
            "returns": {
              "type": "Dependency",
              "description": "The instance for chaining"
            }
          }
        }
      },
      "code": "s3:Dependency.singleton"
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-is-suitable-for",
      "name": "isSuitableFor",
      "content": {
        "block": {
          "title": "method <code>isSuitableFor</code>",
          "body": {
            "description": [
              "Check whether the dependency is suitable for the provided arguments."
            ],
            "parameters": [
              {
                "type": "abstract: any",
                "description": "The abstract to test against"
              },
              {
                "type": "browser: Browser",
                "description": "The browser to test against"
              }
            ],
            "returns": {
              "type": "bool",
              "description": "Whether the dependency is suitable"
            }
          }
        }
      }
    },
    {
      "parent": "class-dependency",
      "id": "class-dependency-method-resolve",
      "name": "resolve",
      "content": {
        "block": {
          "title": "method <code>resolve</code>",
          "body": {
            "description": [
              "Resolves the dependency, providing constructor arguments."
            ],
            "parameters": [
              {
                "type": "args: any[]",
                "description": "The arguments to be passed to the constructor, can be an empty array"
              }
            ],
            "returns": {
              "type": "any",
              "description": "The resolved dependency"
            }
          }
        }
      }
    },
    {
      "main": true,
      "id": "annotation-autowired",
      "title": "Annotation <code>Autowired</code>",
      "code": "import { Autowired } from '@exteranto/compatibility'"
    },
    {
      "id": "function-autowired",
      "content": {
        "block": {
          "title": "function <code>Autowired</code>",
          "body": {
            "description": [
              "Annotation assigned to a class property. This property is, upon invocation, injected the specified dependency from the container based on the property type."
            ],
            "target": ["Property"]
          }
        }
      },
      "code": "s3:@Autowired"
    },
    {
      "main": true,
      "id": "annotation-binding",
      "title": "Annotation <code>Binding</code>",
      "code": "import { Binding } from '@exteranto/compatibility'"
    },
    {
      "id": "function-binding",
      "content": {
        "block": {
          "title": "function <code>Binding</code>",
          "body": {
            "description": [
              "Annotation assigned to a class. This class is then registered as a dependency in the IOC container and can be resolved either directly or using the annotations.",
              "For more complex bindings, please levarage service providers. Read more in the 'Basic Concepts > Service Providers' section."
            ],
            "target": ["Class"]
          }
        }
      },
      "code": "s3:@Binding"
    },
    {
      "main": true,
      "id": "annotation-param",
      "title": "Annotation <code>Param</code>",
      "code": "import { Param } from '@exteranto/compatibility'"
    },
    {
      "id": "function-param",
      "content": {
        "block": {
          "title": "function <code>Param</code>",
          "body": {
            "description": [
              "Annotation assigned to a class property. This property is, upon invocation, injected the corresponding parameter from the IOC container."
            ],
            "parameters": [
              {
                "type": "name: string",
                "description": "The parameter name"
              }
            ],
            "target": ["Property"]
          }
        }
      },
      "code": "s3:@Param"
    },
    {
      "main": true,
      "id": "annotation-singleton",
      "title": "Annotation <code>Singleton</code>",
      "code": "import { Singleton } from '@exteranto/compatibility'"
    },
    {
      "id": "function-singleton",
      "content": {
        "block": {
          "title": "function <code>Singleton</code>",
          "body": {
            "description": [
              "Annotation assigned to a class. This class is then registered as a singleton dependency in the IOC container and can be resolved either directly or using the annotations.",
              "For more complex bindings, please levarage service providers. Read more in the 'Basic Concepts > Service Providers' section."
            ],
            "target": ["Class"]
          }
        }
      },
      "code": "s3:@Singleton"
    },
    {
      "main": true,
      "id": "annotation-wired-with",
      "title": "Annotation <code>WiredWith</code>",
      "code": "import { WiredWith } from '@exteranto/compatibility'"
    },
    {
      "id": "function-wired-with",
      "content": {
        "block": {
          "title": "function <code>WiredWith</code>",
          "body": {
            "description": [
              "Annotation assigned to a property on a class. This property is, upon invocation, injected the dependency from the IOC container with the specified constructor parameters.",
              "Note that you can directly refer to container parameters using the <code>%param.name%</code> notation."
            ],
            "parameters": [
              {
                "type": "args: any[]",
                "description": "The constructor arguments"
              }
            ],
            "target": ["Property"]
          }
        }
      },
      "code": "s3:@WiredWith"
    }
  ]
}
