{
  "title": "@exteranto/compatibility",
  "sections": [
    {
      "main": true,
      "id": "class-comb",
      "title": "Class <code>Comb</code>",
      "code": "import { Comb } from '@exteranto/compatibility'"
    },
    {
      "parent": "class-comb",
      "id": "class-comb-method-only",
      "name": "only",
      "content": {
        "block": {
          "title": "method <code>only</code><br>alias <code>thenOnly</code>",
          "body": {
            "description": [
              "Executes the provided callback only on the provided browsers. If the callback is executed, its return value is stored on the instance to be resolved later."
            ],
            "parameters": [
              {
                "type": "browsers: Browser[]",
                "description": "The browsers to be used"
              },
              {
                "type": "callback: () => any",
                "description": "The callback to be executed"
              }
            ],
            "returns": {
              "type": "Comb",
              "description": "Comb instance for chaining"
            }
          }
        }
      },
      "code": "s3:Comb.only"
    },
    {
      "parent": "class-comb",
      "id": "class-comb-method-except",
      "name": "except",
      "content": {
        "block": {
          "title": "method <code>except</code><br>alias <code>thenExcept</code>",
          "body": {
            "description": [
              "Executes the callback on all browsers except the provided ones. If the callback is executed, its return value is stored on the instance to be resolved later."
            ],
            "parameters": [
              {
                "type": "browsers: Browser[]",
                "description": "The browsers to be excluded"
              },
              {
                "type": "callback: () => any",
                "description": "The callback to be executed"
              }
            ],
            "returns": {
              "type": "Comb",
              "description": "Comb instance for chaining"
            }
          }
        }
      },
      "code": "s3:Comb.except"
    },
    {
      "parent": "class-comb",
      "id": "class-comb-method-then",
      "name": "then",
      "content": {
        "block": {
          "title": "method <code>then</code>",
          "body": {
            "description": [
              "Gather the resulting value after all callbacks are executed. Note that only the last successful result is passed to the callback."
            ],
            "parameters": [
              {
                "type": "callback: (result: any) => any",
                "description": "The callback to be executed"
              }
            ],
            "returns": {
              "type": "Promise<any>",
              "description": "Promise for further chaining of promises."
            }
          }
        }
      },
      "code": "s3:Comb.then"
    },
    {
      "main": true,
      "id": "class-versioning",
      "title": "Class <code>Versioning</code>",
      "code": "import { Versioning } from '@exteranto/compatibility'"
    },
    {
      "parent": "class-versioning",
      "id": "class-versioning-method-since",
      "name": "since",
      "content": {
        "block": {
          "title": "method <code>since</code>",
          "body": {
            "description": [
              "Executes a callback only since the provided applcation version. The <code>app.browser</code> container parameter is used to determine the current version.",
              "Note that the version is <strong>inclusive</strong>."
            ],
            "parameters": [
              {
                "type": "version: string",
                "description": "A valid version string"
              },
              {
                "type": "callback: () => any",
                "description": "The callback to be executed"
              }
            ],
            "returns": {
              "type": "Promise<any>",
              "description": "Promise for further chaining of promises. It is provided the return value from the callback or an empty value"
            }
          }
        }
      },
      "code": "s3:Versioning.since"
    },
    {
      "parent": "class-versioning",
      "id": "class-versioning-method-until",
      "name": "until",
      "content": {
        "block": {
          "title": "method <code>until</code>",
          "body": {
            "description": [
              "Executes a callback only until the provided applcation version. The <code>app.browser</code> container parameter is used to determine the current version.",
              "Note that the version is <strong>inclusive</strong>."
            ],
            "parameters": [
              {
                "type": "version: string",
                "description": "A valid version string"
              },
              {
                "type": "callback: () => any",
                "description": "The callback to be executed"
              }
            ],
            "returns": {
              "type": "Promise<any>",
              "description": "Promise for further chaining of promises. It is provided the return value from the callback or an empty value"
            }
          }
        }
      },
      "code": "s3:Versioning.until"
    },
    {
      "main": true,
      "id": "class-version-resolver",
      "title": "Class <code>VersionResolver</code>",
      "code": "import { VersionResolver } from '@exteranto/compatibility'"
    },
    {
      "parent": "class-version-resolver",
      "id": "class-version-resolver-method-equals",
      "name": "equals",
      "content": {
        "block": {
          "title": "method <code>equals</code>",
          "body": {
            "description": [
              "Determines whether the first provided version is equal to the second one."
            ],
            "parameters": [
              {
                "type": "version: string",
                "description": "A valid version string"
              },
              {
                "type": "comparison: string",
                "description": "A valid version string to be compared against"
              }
            ],
            "returns": {
              "type": "bool",
              "description": "Whether the versions match"
            }
          }
        }
      },
      "code": "s3:VersionResolver.equals"
    },
    {
      "parent": "class-version-resolver",
      "id": "class-version-resolver-method-higher",
      "name": "higher",
      "content": {
        "block": {
          "title": "method <code>higher</code>",
          "body": {
            "description": [
              "Determines whether the first provided version is higher than the second one."
            ],
            "parameters": [
              {
                "type": "version: string",
                "description": "A valid version string"
              },
              {
                "type": "comparison: string",
                "description": "A valid version string to be compared against"
              }
            ],
            "returns": {
              "type": "bool",
              "description": "Whether the version is higher than the comparison"
            }
          }
        }
      },
      "code": "s3:VersionResolver.higher"
    },
    {
      "parent": "class-version-resolver",
      "id": "class-version-resolver-method-lower",
      "name": "lower",
      "content": {
        "block": {
          "title": "method <code>lower</code>",
          "body": {
            "description": [
              "Determines whether the first provided version is lower than the second one."
            ],
            "parameters": [
              {
                "type": "version: string",
                "description": "A valid version string"
              },
              {
                "type": "comparison: string",
                "description": "A valid version string to be compared against"
              }
            ],
            "returns": {
              "type": "bool",
              "description": "Whether the version is lower that the comparison"
            }
          }
        }
      },
      "code": "s3:VersionResolver.lower"
    }
  ]
}
