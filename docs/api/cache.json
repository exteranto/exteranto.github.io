{
  "title": "@exteranto/cache",
  "sections": [
    {
      "main": true,
      "id": "class-cache",
      "title": "Class <code>Cache</code>",
      "code": "import { Cache } from '@exteranto/cache'"
    },
    {
      "parent": "class-cache",
      "id": "class-cache-method-store",
      "name": "store",
      "content": {
        "block": {
          "title": "method <code>store</code>",
          "body": {
            "description": [
              "Stores the storable callback value to the cache. On consecutive calls resolves the value from the cache."
            ],
            "parameters": [
              {
                "type": "key: string",
                "description": "The key of the cached value"
              },
              {
                "type": "storable: () => any",
                "description": "The callback whose return value is stored"
              },
              {
                "type": "timeout: number",
                "description": "The cache timeout, default value can be configured",
                "optional": true
              }
            ],
            "returns": {
              "type": "Promise<any>",
              "description": "A promise with the callback return value or the cached value"
            }
          }
        }
      },
      "code": "s3:Cache.store"
    },
    {
      "parent": "class-cache",
      "id": "class-cache-method-clear",
      "name": "clear",
      "content": {
        "block": {
          "title": "method <code>clear</code>",
          "body": {
            "description": [
              "Clears all the cached values."
            ],
            "returns": {
              "type": "Promise<void>",
              "description": "A promise resolved after the cache was cleared"
            }
          }
        }
      },
      "code": "s3:Cache.clear"
    },
    {
      "main": true,
      "id": "annotation-cached",
      "title": "Annotation <code>@Cached</code>",
      "code": "import { Cached } from '@exteranto/cache'"
    },
    {
      "id": "function-cached",
      "content": {
        "block": {
          "title": "function <code>Cached</code>",
          "body": {
            "description": [
              "Annotation assigned to a method. This annotation caches the method return value. Note that the annotated method now ALWAYS returns a <code>Promise&lt;any&gt;</code>.",
              "The cache key is concatenated constructor name, method name, and json-stringified arguments. In the example, this would correspond to <code>UserService.all.[]</code>.",
              "Note that this approach makes it so that a method all with different arguments will be cached with a different key."
            ],
            "target": ["Method"]
          }
        }
      },
      "code": "s3:@Cached"
    }
  ]
}
